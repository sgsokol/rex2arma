   return wrap(X);
}"
)
tempdir()
source("rex2arma.R"); source("expm.higham.R")
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
n=600; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
source("rex2arma.R"); source("expm.higham.R")
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
source("rex2arma.R"); source("expm.higham.R")
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
n=1000; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
savehistory()
library(expm)
library(Rcpp)
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
source("rex2arma.R"); source("expm.higham.R")
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
balancing=F
A=diag(3)+0.1
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
getwd()
n=1000; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
n=100; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
library(rbenchmark)
rbenchmark(rex_arma_(A, F), expm.higham(A, F))
benchmark(rex_arma_(A, F), expm.higham(A, F))
n=200; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
benchmark(rex_arma_(A, F), expm.higham(A, F))
savehistory()
library(rbenchmark)
library(Rcpp)
library(expm)
source("rex2arma.R"); source("expm.higham.R")
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
n=200; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
balancing=F
n=3; A=diag(3)+0.1
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
n=100; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=1000; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=100; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=200; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=300; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=400; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=500; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=600; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=700; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=800; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=900; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=800; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
n=1000; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
benchmark(rex_arma_(A, F), expm.higham(A, F))
n=100; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
benchmark(rex_arma_(A, F), expm.higham(A, F))
n=200; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
benchmark(rex_arma_(A, F), expm.higham(A, F))
source("rex2arma.R"); source("expm.higham.R")
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
tempdir()
n=100; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
ls()
n=1000; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
n=900; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
system.time(rc<-rex_arma_(A, F)); system.time(re<-expm.higham(A, F))
n=100; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
benchmark(rex_arma_(A, F), expm.higham(A, F))
n=200; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
benchmark(rex_arma_(A, F), expm.higham(A, F))
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
n=1000; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
savehistory()
library(expm)
library(Rcpp)
A=diag(3)+0.1
balancing=F
source("rex2arma.R"); source("expm.higham.R")
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
n=1000; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
balancing=T
n=10; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, F)-rex_arma_(A, F))
n=100; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, balancing)-rex_arma_(A, balancing))
n=200; set.seed(7); A=matrix(rnorm(n*n), n); range(expm.higham(A, balancing)-rex_arma_(A, balancing))
benchmark(rex_arma_(A, balancing), expm.higham(A, balancing))
library(rbenchmark)
benchmark(rex_arma_(A, balancing), expm.higham(A, balancing))
st2arma(c(1,A))
st2arma(c(1,3:7))
rex2arma(c(1,3:7))
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7))
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7))
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7))
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7))
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7))
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7))
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7))
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7))
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7))
cat(rex2arma(c(1,3:7), e=F))
rex2arma(c(1,3:7), r=T)
rex2arma(c(1,3:7), e=1, r=T)
cat(rex2arma(c(1,3:7), e=F))
source("rex2arma.R"); source("expm.higham.R")
cat(rex2arma(c(1,3:7), e=F))
n
st
n
obj
typeof(obj)
rtype2rcpparma(typeof(obj))["arma"]
sprintf("as<%svec>(c_r_(%s))", rtype2rcpparma(typeof(obj))["arma"],
         paste(nms, args, sep="", colapse=", "))
paste(nms, args, sep="", colapse=", ")
paste(nms, args, sep="", collapse=", ")
Q
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7), r=T)
c
cat(rex2arma(c(1,3:7), e=F))
c
?c
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7), r=T)
cat(co<-rex2arma(c(1,3:7), e=F))
co
parse(t=co")
")
parse(t=co)
eval(parse(t=co))
rex_arma_()
cat(co)
source("rex2arma.R"); source("expm.higham.R")
rex2arma(c(1,3:7), r=T)
v=rex2arma(c(1,3:7), r=T)
typeof(v)
cppFunction(depends='RcppArmadillo', rebuild=TRUE,
'SEXP ret() {
using namespace arma;
using namespace Rcpp;
   vec v=linspace<vec>(1,10, 5);
   //v.print(Rcout);
   return wrap(find(v > 2));
}'
)
ret()
cppFunction(depends='RcppArmadillo', rebuild=TRUE,
'SEXP ret() {
using namespace arma;
using namespace Rcpp;
   vec v=linspace<vec>(1,10, 5);
   //v.print(Rcout);
   return wrap(find(v > 3));
}'
)
ret()
cppFunction(depends='RcppArmadillo', rebuild=TRUE,
'SEXP ret() {
using namespace arma;
using namespace Rcpp;
   vec v=linspace<vec>(1,10, 5);
   v.print(Rcout);
   return wrap(find(v > 4));
}'
)
ret()
cppFunction(depends='RcppArmadillo', rebuild=TRUE,
'SEXP ret() {
using namespace arma;
using namespace Rcpp;
   vec v=linspace<vec>(1,10, 5);
   v.print(Rcout);
   return wrap(find(v > 4)+1);
}'
)
ret()
savehistory()
source("rex2arma.R"); source("expm.higham.R")
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
library(expm)
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
library(Rcpp)
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
   if (d.size() != 2 || d.at(0) != d.at(1)) stop(\"'A' must be a square matrix\");
options(verbose=F)
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
cat(rex2arma(expm.higham, e=F, re=T), file="tmp.R"); source("tmp.R")
rm(list=ls())
source("rex2arma.R");
setwd("rex2arma/")
source("rex2arma.R");
source("test/test_fastLm.r")
dim(X)
dim(res)
length(y)
rex2arma(t(y)%*%X)
cat(rex2arma(t(y)%*%X), e=F)
cat(rex2arma(t(y)%*%X, e=F))
source("rex2arma.R");
cat(rex2arma(t(y)%*%X, e=F))
n
ret
n
ins
cat(rex2arma(t(y)%*%X, e=F))
n
leq
Q
source("rex2arma.R");
cat(rex2arma(t(y)%*%X, e=F))
c
cat(rex2arma(t(y)%*%X, e=T))
Q
source("rex2arma.R");
cat(rex2arma(t(y)%*%X, e=T))
cat(rex2arma(c(t(y)%*%X), e=T))
source("rex2arma.R");
cat(rex2arma(c(t(y)%*%X), e=F))
n
args
n
s1
?switch
Q
source("rex2arma.R");
cat(rex2arma(c(t(y)%*%X), e=F))
n
cppFunction(depends='RcppArmadillo', rebuild=TRUE,
'
using namespace arma;
using namespace Rcpp;
SEXP ret(mat A) {
   Environment base==Environment::base_env()
   Function f=Environment("package:Matrix")["norm"];
   double n;
   n=as<double>(f(A, "1"));
   //Function rep=base["rep"];
   vec v=as<vec>(bas["rep"](linspace<vec>(1, 5, 3), 2));
   return wrap(n);
}'
)
cppFunction(depends='RcppArmadillo', rebuild=TRUE,
'
using namespace arma;
using namespace Rcpp;
SEXP ret(mat A) {
   Environment base=Environment::base_env()
   Function f=Environment("package:Matrix")["norm"];
   double n;
   n=as<double>(f(A, "1"));
   //Function rep=base["rep"];
   vec v=as<vec>(bas["rep"](linspace<vec>(1, 5, 3), 2));
   return wrap(v);
}'
)
cppFunction(depends='RcppArmadillo', rebuild=TRUE,
'
using namespace arma;
using namespace Rcpp;
SEXP ret(mat A) {
   Environment base=Environment::base_env()
   Function f=Environment("package:Matrix")["norm"];
   double n;
   //n=as<double>(f(A, "1"));
   //Function rep=base["rep"];
   vec v=as<vec>(bas["rep"](linspace<vec>(1, 5, 3), 2));
   return wrap(v);
}'
)
cppFunction(depends='RcppArmadillo', rebuild=TRUE,
'
using namespace arma;
using namespace Rcpp;
SEXP ret(mat A) {
   Environment base=Environment::base_env();
   Function f=Environment("package:Matrix")["norm"];
   double n;
   //n=as<double>(f(A, "1"));
   //Function rep=base["rep"];
   vec v=as<vec>(base["rep"](linspace<vec>(1, 5, 3), 2));
   return wrap(v);
}'
)
cppFunction(depends='RcppArmadillo', rebuild=TRUE,
'
using namespace arma;
using namespace Rcpp;
SEXP ret(mat A) {
   Environment base=Environment::base_env();
   Function f=Environment("package:Matrix")["norm"];
   Function rep=base["rep"];
   double n;
   //n=as<double>(f(A, "1"));
   //Function rep=base["rep"];
   vec v=as<vec>(rep(linspace<vec>(1, 5, 3), 2));
   return wrap(v);
}'
)
ret()
ret(A)
A=diag(3)+0.1
ret(A)
cppFunction(depends='RcppArmadillo', rebuild=TRUE,
'
using namespace arma;
using namespace Rcpp;
SEXP ret(mat A) {
   Environment base=Environment::base_env();
   Function f=Environment("package:Matrix")["norm"];
   Function rep=base["rep"];
   double n;
   //n=as<double>(f(A, "1"));
   //Function rep=base["rep"];
   vec v=as<vec>((base["rep"])(linspace<vec>(1, 5, 3), 2));
   return wrap(v);
}'
)
expm.Higham08
rm(list=ls())
setwd("test/")
source("../rex2arma.R")
source("../rex2arma.inc.R")
source("../rex2arma.R")
require(expm)
require(rbenchmark)
#source("../rex2arma.inc.R")
#source("../rex2arma.R")
require(Rcpp)
# The original R code for expm(A) by a method of Higham is accessible
# from the package expm, function expm.Higham08
source("expm.higham.R") # create expm.higham() function
A=diag(2) # just examples of two input parameters
balancing=TRUE
rex2arma(expm.higham, func="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
rex2arma(expm.higham, fname="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
source("../rex2arma.R")
rex2arma(expm.higham, fname="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
n
st
n
ins
rhs
Q
source("../rex2arma.R")
rex2arma(expm.higham, fname="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
Q
source("../rex2arma.inc.R")
rex2arma(expm.higham, fname="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
source("../rex2arma.R")
rex2arma(expm.higham, fname="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
source("../rex2arma.R")
rex2arma(expm.higham, fname="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
A=diag(2) # just examples of two input parameters
balancing=TRUE
cppp_code=rex2arma(expm.higham, fname="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
set.seed(7) # make the tests reproducible
n=10
As=matrix(rnorm(n*n), n)
print(benchmark(
   expm.higham(As, TRUE),
   expm.higham(As, FALSE),
   expm_cpp(As, TRUE),
   expm_cpp(As, FALSE),
   oreder="relative"
)[,1:4])
print(benchmark(
   expm.higham(As, TRUE),
   expm.higham(As, FALSE),
   expm_cpp(As, TRUE),
   expm_cpp(As, FALSE),
   order="relative"
)[,1:4])
print(benchmark(
   expm.higham(As, balancing=TRUE),
   expm.higham(As, balancing=FALSE),
   expm_cpp(As, balancing=TRUE),
   expm_cpp(As, balancing=FALSE),
   order="relative"
)[,1:4])
n=100
As=matrix(rnorm(n*n), n)
print(benchmark(
   expm.higham(As, balancing=TRUE),
   expm.higham(As, balancing=FALSE),
   expm_cpp(As, balancing=TRUE),
   expm_cpp(As, balancing=FALSE),
   order="relative"
)[,1:4])
?benchmark
n=1000
As=matrix(rnorm(n*n), n)
print(benchmark(
   expm.higham(As, balancing=TRUE),
   expm.higham(As, balancing=FALSE),
   expm_cpp(As, balancing=TRUE),
   expm_cpp(As, balancing=FALSE),
   order="relative",
   replications=3
)[,1:4])
expm_cpp(As, balancing=TRUE)
ae=expm_cpp(As, balancing=TRUE)
ae=expm_cpp(As, balancing=FALSE)
n=1000
As=matrix(rnorm(n*n), n)
print(benchmark(
   expm.higham(As, balancing=TRUE),
   expm.higham(As, balancing=FALSE),
   expm_cpp(As, balancing=TRUE),
   expm_cpp(As, balancing=FALSE),
   order="relative",
   replications=5
)[,1:4])
A=Diagonal(2)
A
is(A, "Matrix")
cppp_code=rex2arma(expm.higham, fname="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
options(error=recover)
cppp_code=rex2arma(expm.higham, fname="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
it
c
it
var_typeof[it, ]
var_dims[[it]]
symdim(as.symbol(it), probenv, var_dims)
probenv
ls(probenv)
probenv$A
debug(symdim)
var_dims
symdim(as.symbol(it), probenv)
n
s1
n
obj
n
len
n
Q
source("../rex2arma.R")
source("../rex2arma.R"); source("../rex2arma.inc.R")
cppp_code=rex2arma(expm.higham, fname="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
rhs
Q
balance(A, "P")
Matrix::balance(A, "P")
balance
expm(A, T)
expm(A)
Matrix::expm(A)
Matrix::expm
showMethods("expm")
   expm.higham(As, balancing=FALSE),
balancing=F
cppp_code=rex2arma(expm.higham, fname="expm_cpp", exec=1, rebuild=TRUE, copy=FALSE)
stopifnot(diff(range(expm.higham(As, balancing=TRUE)-expm_cpp(As, balancing=TRUE))) < 1.e-14)
stopifnot(diff(range(expm.higham(As, balancing=FALSE)-expm_cpp(As, balancing=FALSE))) < 1.e-14)
source("test_expm.R")
ls()
n
traceback()
balance(A, "P")
Q
n=1000
As=matrix(rnorm(n*n), n)
stopifnot(diff(range(expm.higham(As, balancing=TRUE)-expm_cpp(As, balancing=TRUE))) < 1.e-14)
stopifnot(diff(range(expm.higham(As, balancing=FALSE)-expm_cpp(As, balancing=FALSE))) < 1.e-14)
print(benchmark(
   expm.higham(As, balancing=TRUE),
   expm.higham(As, balancing=FALSE),
   expm_cpp(As, balancing=TRUE),
   expm_cpp(As, balancing=FALSE),
   order="relative",
   replications=5
)[,1:4])
n=800
As=matrix(rnorm(n*n), n)
stopifnot(diff(range(expm.higham(As, balancing=TRUE)-expm_cpp(As, balancing=TRUE))) < 1.e-14)
stopifnot(diff(range(expm.higham(As, balancing=FALSE)-expm_cpp(As, balancing=FALSE))) < 1.e-14)
print(benchmark(
   expm.higham(As, balancing=TRUE),
   expm.higham(As, balancing=FALSE),
   expm_cpp(As, balancing=TRUE),
   expm_cpp(As, balancing=FALSE),
   order="relative",
   replications=5
)[,1:4])
 c(1,2)[10:20]
savehistory()
