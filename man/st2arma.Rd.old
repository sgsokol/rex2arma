\name{st2arma}
\alias{st2arma}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
%%  ~~function to do ... ~~
}
\description{
%%  ~~ A concise (1-5 lines) description of what the function does. ~~
}
\usage{
st2arma(st, call2arma = c(qr.solve = "solve", ginv = "pinv", `^` = "pow", stop = "stop", ceiling = "ceil", which.min = "which_min", which.max = "which_max", Re = "real", Im = "imag"), indent = "", iftern = FALSE, env = parent.frame(), ...)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{st}{
%%     ~~Describe \code{st} here~~
}
  \item{call2arma}{
%%     ~~Describe \code{call2arma} here~~
}
  \item{indent}{
%%     ~~Describe \code{indent} here~~
}
  \item{iftern}{
%%     ~~Describe \code{iftern} here~~
}
  \item{env}{
%%     ~~Describe \code{env} here~~
}
  \item{\dots}{
%%     ~~Describe \code{\dots} here~~
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (st, call2arma = c(qr.solve = "solve", ginv = "pinv", 
    `^` = "pow", stop = "stop", ceiling = "ceil", which.min = "which_min", 
    which.max = "which_max", Re = "real", Im = "imag"), indent = "", 
    iftern = FALSE, env = parent.frame(), ...) 
{
    if (!is.call(st)) {
        s1 = as.character(st)
        if (is.character(st)) {
            return(sprintf("\"\%s\"", gsub("([\"\\])", "\\\\\\1", 
                s1)))
        }
        if (s1 == "T" || s1 == "TRUE") {
            return("true")
        }
        else if (s1 == "F" || s1 == "FALSE") {
            return("false")
        }
        if (is.symbol(st)) {
            s1 = gsub("\\.", "_", s1)
        }
        return(s1)
    }
    if (is.call(st[[1L]]) && as.character(st[[1L]][[1L]]) == 
        "::") {
        s1 = sprintf("\%s_\%s_r_", as.character(st[[1L]][[2L]]), 
            as.character(st[[1L]][[3L]]))
    }
    else {
        s1 = as.character(st[[1L]])
        if (!is.function(mget(s1, mode = "function", env = baseenv(), 
            ifnot = NA)[[1L]])) {
            pkg = find(s1, mode = "function")
            if (length(pkg)) {
                if (!"package:base" \%in\% pkg) {
                  pkg = pkg[1L]
                  if (s1 != "ginv" && pkg != "package:base") {
                    s1 = sprintf("\%s_\%s_r_", substring(pkg, 9L), 
                      s1)
                  }
                }
            }
        }
    }
    if (s1 == "{") {
        args = sapply(st[-1L], st2arma, call2arma, sprintf("\%s   ", 
            indent), iftern, env, ...)
    }
    else if (s1 == "=" || s1 == "<-") {
        args = c(st2arma(st[[2L]], call2arma, indent, iftern, 
            env, ...), st2arma(st[[3L]], call2arma, indent, iftern = TRUE, 
            env, ...))
    }
    else {
        args = sapply(st[-1L], st2arma, call2arma, indent, iftern, 
            env, ...)
    }
    if (s1 == "=" || s1 == "<-") {
        return(sprintf("\%s\%s=\%s;\n", indent, args[1L], args[2L]))
    }
    nms = names(args)
    if (!is.null(nms)) {
        i = nchar(nms) > 0L
        nms[i] = sprintf("_[\"\%s\"]=", gsub("([\"\\])", "\\\\\\1", 
            nms[i]))
    }
    if (s1 == "(") {
        return(sprintf("(\%s)", args[1L]))
    }
    if (s1 == "[") {
        inu = which(sapply(st[-(1:2)], is.numeric))
        isy = which(sapply(st[-(1:2)], is.symbol))
        dims = lapply(st[-(1:2)], symdim, env, ...)
        isca = which(sapply(dims, function(d) length(d) == 1L && 
            d == "1"))
        s1 = args[1L]
        args = args[-1L]
        if (all(sort(c(inu, isy)) == isca)) {
            args = sprintf("(\%s)-1", args)
            args[inu] = sapply(st[inu + 2], function(s) s - 1L)
            return(sprintf("\%s.at(\%s)", s1, paste(args, collapse = ", ")))
        }
        else if (length(dims[[1L]]) > 1) {
            stop(sprintf("Index by matrix in '\%s' is not yet implemented.", 
                format(st)))
        }
        else {
            args[isca] = sprintf("(\%s)-1", args[isca])
            args[inu] = st[inu + 2] - 1
            args[args == ""] = "span()"
            irange = which(sapply(st[-(1:2)], function(s) is.call(s) && 
                as.character(s[[1L]]) == ":"))
            for (i in irange) {
                b = st[[i + 2L]][[2L]]
                e = st[[i + 2L]][[3L]]
                args[i] = sprintf("span(\%s,\%s)", if (is.numeric(b)) 
                  b - 1L
                else paste(b, 1, sep = "-"), if (is.numeric(e)) 
                  e - 1L
                else paste(e, 1, sep = "-"))
            }
            return(sprintf("\%s(\%s)", s1, paste(args, collapse = ", ")))
        }
    }
    if (s1 == ":") {
        if (is.numeric(st[[2L]]) && is.numeric(st[[3L]])) {
            len = as.integer(abs(st[[3L]] - st[[2L]]) + 1)
        }
        else {
            len = sprintf("abs(\%s-\%s)+1", args[2L], args[1L])
        }
        return(sprintf("linspace<ivec>(\%s, \%s, \%s)", args[1L], 
            args[2L], len))
    }
    if (s1 == "for") {
        if (is.call(st[[3L]]) && as.character(st[[3L]][[1L]]) == 
            ":") {
            begend = sapply(st[[3L]][-1L], st2arma, call2arma, 
                indent, iftern = TRUE, env, ...)
            counter = args[1L]
            return(sprintf("\%sfor (int incr_arma_=(\%s <= \%s ? 1 : -1), \%s=\%s; \%s != \%s+incr_arma_; \%s+=incr_arma_) \%s", 
                indent, begend[1L], begend[2L], counter, begend[1L], 
                counter, begend[2L], counter, args[3L]))
        }
        else {
            stop("This type of 'for' loop '\%s' is not yet implemented")
        }
    }
    if (s1 == "return") {
        return(sprintf("return wrap(\%s)", args[1L]))
    }
    if (s1 == "if") {
        if (iftern) {
            return(sprintf("(\%s ? \%s : \%s)", args[1L], args[2L], 
                args[3L]))
        }
        else {
            res = sprintf("\%sif (\%s) \%s", indent, args[1L], args[2L])
            if (length(args) == 3L) {
                res1 = substring(res, 1, nchar(res) - 1)
                res = sprintf("\%s\%s else \%s\%s", res1, if (substring(res1, 
                  nchar(res1)) != "}") 
                  ";"
                else "", args[3L], if (substring(args[3L], nchar(args[3L])) != 
                  "\n") 
                  "\n"
                else "")
            }
            else {
                res = sprintf("\%s\%s", res, if (substring(res, 
                  nchar(res)) != "\n") 
                  ";\n"
                else "")
            }
        }
        return(res)
    }
    if (s1 == "{") {
        return(sprintf("{\n\%s\%s}\n", paste(args, collapse = ""), 
            indent))
    }
    if (s1 == "$") {
        res = sprintf("\%s[\"\%s\"]", args[1L], args[2L])
        obj = eval(st, env = env)
        t = rtype2rcpparma(typeof(obj))
        d = svm(obj)
        res = sprintf("as<\%s>(\%s)", get_decl(t, d)["arma"], res)
        return(res)
    }
    dims = lapply(st[-1L], symdim, env, ...)
    lens = sapply(dims, length)
    lenst = length(st)
    if (s1 \%in\% c("*", "/", "+", "-", ">", "<", ">=", "<=", "==", 
        "!=", "&&", "||") && lenst == 3L) {
        if (s1 == "*" && dims[[1L]][1L] != "1" && dims[[2L]][1L] != 
            "1") {
            s1 = "\%"
        }
        imin = imax = 0
        if (lens[1L] > lens[2L]) {
            imin = 2
            imax = 1
        }
        else if (lens[1L] < lens[2L]) {
            imin = 1
            imax = 2
        }
        if (imin != 0 && dims[imin] != "1") {
            args[imin] = sprintf("mat(vec(\%s).begin(), \%s.n_rows, \%s.n_cols, false)", 
                args[imin], args[imax], args[imax])
        }
        return(sprintf("\%s \%s \%s", args[1L], s1, args[2L]))
    }
    if (any(s1 == c("\%*\%", crossprod, tcrossprod))) {
        a1 = args[1L]
        d1 = dims[[1L]]
        l1 = lens[1L]
        if (lenst == 3L) {
            a2 = args[2L]
            d2 = dims[[2L]]
            l2 = lens[2L]
        }
        if (lenst == 2L && s1 == "crossprod") {
            a2 = a1
            a1 = sprintf("(\%s).t()", a1)
            if (l1 == 1L) {
                d2 = "1"
                l2 = 1L
                d1 = c("1", d1)
                l1 = 2L
            }
            else {
                d2 = d1
                l2 = l1
                d1 = rev(d1)
            }
        }
        else if (lenst == 2L && s1 == "tcrossprod") {
            a2 = sprintf("(\%s).t()", a1)
            if (l1 == 1L) {
                d2 = c("1", d1)
                l2 = 2L
            }
            else {
                d2 = rev(d1)
                l2 = l1
            }
        }
        else if (s1 == "\%*\%" && l1 == 1L) {
            if (l2 == 1L && d1[1L] != "1" && d2[1L] != "1") {
                return(sprintf("dot(\%s, \%s)", a1, a2))
            }
        }
        res = sprintf("\%s*\%s", a1, a2)
        if (d1[1L] == "1" && (l2 == 1L || d2[2L] == "1")) {
            res = sprintf("as_scalar(\%s)", res)
        }
        return(res)
    }
    if (s1 == "\%o\%") {
        if (lens[[1L]] == 1 && dims[[1L]] == "1") {
            if (!(lens[[2L]] == 1 && dims[[2L]] == "1")) {
                return(sprintf("\%s*\%s.t()", args[1L], args[2L]))
            }
            else {
                return(sprintf("\%s*\%s", args[1L], args[2L]))
            }
        }
        else if (lens[[2L]] == 1 && dims[[2L]] == "1") {
            return(sprintf("\%s*\%s", args[1L], args[2L]))
        }
        return(sprintf("kron(vectorise(\%s), vectorise(\%s).t())", 
            args[1L], args[2L]))
    }
    if (s1 == "+" || s1 == "-" && lenst == 2L) {
        return(sprintf("\%s\%s", s1, args[1L]))
    }
    if (s1 == "c" && all(lens == 1L) && all(unlist(dims) == "1")) {
        return(sprintf("vec({\%s})", paste(nms, args, sep = "", 
            collapse = ", ")))
    }
    if (s1 == "c" && lenst > 2) {
        obj = eval(st, env = env)
        return(sprintf("as<\%svec>(c_r_(\%s))", rtype2rcpparma(typeof(obj))["arma"], 
            paste(nms, args, sep = "", collapse = ", ")))
    }
    if (s1 \%in\% c("c", "as.numeric", "as.double", "as.integer") && 
        lenst == 2L) {
        if (lens[1L] > 1L) {
            args = sprintf("vectorise(\%s)", args[1L])
        }
        else if (dims[[1L]] == "1") {
            args = sprintf("as_scalar(\%s)", args[1L])
        }
        else {
            args = args[1L]
        }
        switch(s1, as.integer = return(sprintf("conv_to<ivec>::from(\%s)", 
            args)), return(sprintf("conv_to<vec>::from(\%s)", 
            args)))
    }
    if (s1 == "rbind") {
        rtype = rtype2rcpparma(typeof(eval(st[[2L]], env = env)))["arma"]
        if (length(dims[[1L]]) == 1L && dims[[1L]] == "1") {
            res = sprintf("\%smat(1,1).fill(\%s)", rtype, args[1L])
        }
        else if (length(dims[[1L]]) == 1L) {
            res = sprintf("(\%s).st()", args[1L])
        }
        else {
            res = args[1L]
        }
        if (length(args) == 1L) {
            return(res)
        }
        for (i in 2L:length(args)) {
            a = args[i]
            if (length(dims[[i]]) == 1L) {
                a = sprintf("(\%s).st()", a)
            }
            atype = rtype2rcpparma(typeof(eval(st[[i + 1L]], 
                env = env)))["arma"]
            if (atype != rtype) {
                if (atype == "cx_" || atype == "") {
                  rtype = atype
                  res = sprintf("join_vert(conv_to<\%smat>::from(\%s), \%s)", 
                    atype, res, a)
                }
                else {
                  res = sprintf("join_vert(\%s, conv_to<\%smat>::from(\%s))", 
                    rtype, res, a)
                }
            }
            else {
                res = sprintf("join_vert(\%s, \%s)", res, a)
            }
        }
        return(res)
    }
    if (s1 == "cbind") {
        rtype = rtype2rcpparma(typeof(eval(st[[2L]], env = env)))["arma"]
        if (length(dims[[1L]]) == 1L && dims[[1L]] == "1") {
            res = sprintf("\%smat(1,1).fill(\%s)", rtype, args[1L])
        }
        else if (length(dims[[1L]]) == 1L) {
            res = sprintf("\%smat(\%s)", rtype, args[1L])
        }
        else {
            res = args[1]
        }
        if (length(args) == 1L) {
            return(res)
        }
        for (i in 2L:length(args)) {
            a = args[i]
            atype = rtype2rcpparma(typeof(eval(st[[i + 1L]], 
                env = env)))["arma"]
            if (atype != rtype) {
                if (atype == "cx_" || atype == "") {
                  rtype = atype
                  res = sprintf("join_horiz(conv_to<\%smat>::from(\%s), \%s)", 
                    atype, res, a)
                }
                else {
                  res = sprintf("join_horiz(\%s, conv_to<\%smat>::from(\%s))", 
                    rtype, res, a)
                }
            }
            else {
                res = sprintf("join_horiz(\%s, \%s)", res, a)
            }
        }
        return(res)
    }
    if (s1 == "list") {
        argconv = sapply(seq_along(args), function(i) if (lens[i] > 
            1L || dims[[i]][1L] == "1") 
            args[i]
        else sprintf("NumericVector(\%s.begin(), \%s.end())", args[i], 
            args[i]))
        return(sprintf("List::create(\%s)", paste(nms, argconv, 
            sep = "", collapse = ", ")))
    }
    if (s1 == "rep") {
        obj = eval(st, env = env)
        t = typeof(obj)
        return(sprintf("as<\%svec>(rep_r_(\%s))", rtype2rcpparma(t)["arma"], 
            paste(nms, args, sep = "", collapse = ", ")))
    }
    if (s1 == "diag") {
        if (lenst == 2L) {
            a1 = args[1L]
            l1 = lens[1L]
            if (dims[[1L]][1L] == "1") {
                return(sprintf("eye<mat>(\%s, \%s)", a1, a1))
            }
            else if (l1 == 1L) {
                return(sprintf("diagmat(\%s)", a1))
            }
            else if (l1 == 2L) {
                return(sprintf("diagvec(\%s)", a1))
            }
        }
        else if (lenst == 3L) {
            a1 = args[1L]
            l1 = lens[1L]
            a2 = args[2L]
            l2 = lens[2L]
            if (dims[[1L]][1L] == "1") {
                return(sprintf("diagmat(vec(\%s).fill(\%s))", a2, 
                  a1))
            }
            else if (lens[1L] == 1L) {
                return(sprintf("diagmat(\%s)", a1))
            }
            else if (lens[1L] == 2L) {
                stop("If a matrix is the first argument to diag(), the second arguments is meaningless.")
            }
        }
    }
    if (s1 == "nrow") {
        if (is.symbol(st[[2]])) {
            return(sprintf("\%s.n_rows", args[1L]))
        }
        return(sprintf("(\%s).n_rows", args[1L]))
    }
    if (s1 == "ncol") {
        if (is.symbol(st[[2]])) {
            return(sprintf("\%s.n_cols", args[1L]))
        }
        return(sprintf("(\%s).n_cols", args[1L]))
    }
    if (s1 == "dim") {
        return(sprintf("ivec(IntegerVector::create(\%s.n_rows, \%s.n_cols))", 
            args[1L], args[1L]))
    }
    if (s1 == "length") {
        return(sprintf("\%s.size()", args[1L]))
    }
    if (s1 == "t") {
        if (is.symbol(st[[2]])) {
            return(sprintf("\%s.st()", args[1L]))
        }
        return(sprintf("(\%s).t()", args[1L]))
    }
    if (s1 == "norm") {
        if (lenst == 2L) {
            return(sprintf("norm(\%s)", args))
        }
        else if (lenst == 3L) {
            if (is.character(st[[3L]])) {
                ntype = c(`1` = 1, O = 1, `2` = 2, I = "\"inf\"", 
                  F = "\"fro\"")[toupper(st[[3L]])]
                if (is.na(ntype) && toupper(st[[3L]]) == "M") {
                  return(sprintf("max(abs(vectorise(\%s)))", args))
                }
                else if (is.na(ntype)) {
                  stop(sprintf("unknown norm type in '\%s'", format(st)))
                }
                return(sprintf("norm(\%s, \%s)", args[1L], ntype))
            }
            else {
                stop(sprintf("The norm type in \"\%s\" must be one of litteral \"O\", \"I\", \"F\", \"M\", \"2\"", 
                  format(st)))
            }
        }
    }
    if (s1 == "print") {
        if (lens[1L] == 1 && dims[[1]] == "1") {
            return(sprintf("\%sRcout << \"\%s=\" << \%s << endl;\n", 
                indent, args[1L], args[1L]))
        }
        return(sprintf("\%s\%s.print(Rcout, \"\%s=\");\n", indent, 
            args[1L], args[1L]))
    }
    if (s1 \%in\% names(call2arma)) {
        res = sprintf("\%s(\%s)", call2arma[s1], paste(nms, args, 
            sep = "", collapse = ", "))
        return(res)
    }
    res = sprintf("\%s(\%s)", s1, paste(nms, args, sep = "", collapse = ", "))
    n = nchar(s1)
    if (n > 3 && substring(s1, n - 2) == "_r_") {
        obj = eval(st, env = env)
        t = rtype2rcpparma(typeof(obj))
        d = svm(obj)
        res = sprintf("as<\%s>(\%s)", get_decl(t, d)["arma"], res)
    }
    return(res)
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory.
\keyword{ ~kwd1 }
\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line
